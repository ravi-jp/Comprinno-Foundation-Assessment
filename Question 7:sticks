algorithm sticks()
//input:N sticks length
//output:maximium possible rectangle

step 1:read the inputs,n no of sticks length
step 2:check if insuficient sticks are present for ractangle
        if(N<4) cout<<"-1"
step 3:sort the sticks in ascending order of their length
          a.sort()
 step 4:traverse from the end and choose the stick pair of same size.
          2 pair set should be choosen and they must be different size
          if(a[i]==a[i-1])
          {
            if(flag1==0){ pair1=a[i],flag1==1}
              else if(pair1!=a[i]){pair2=a[i];cout<<pair1*pair2;return;//if 2 pair set avaible then the ractangle formed and the area is returned
           }
 step 5:if rectangle not formed in the above step then cout<<"-1" means no ractangle formed
 step 6:stop
 
 
 //implemtation of the above algorithm
 
 #include<iostream>
 using namespace std;
 
 void stick(int a[],int n)//function to find the result
 {
 int pair1,pair2;//to hold the sticks which form max rectangle
  if(n<4)//if sticks are insufficient
  {
     cout<<"-1";
   }
   sort(a,a+n);//sort the sticks in ascending order
   int flag1=0;
   for(int i=n-1;i>0;i--)
   {
      if(a[i]==a[i-1])
      {
        if(flag1==0)//choose the 1st maximum stick pair
        {
          pair1=a[i];
          flag1=1;
          i--;
         }
         else if(pair1!=a[i])//choose the 2nd maximum stick pair in the list
         {
            pair2=a[i];
            cout<<pair1*pair2;//mulitplies the sticks length to get the area of rectangle
            return;//after displaying the area size, then return to calling function
          }
       }
    }//closing the for loop
    cout<<"-1";//if ractangle can't formed from the given sticks
  }//closing the function
  
  void main()
  {
    int T;
    cin>>T;
    while(T--)
    {
      int n;
      cin>>n;
      int a[n];
      for(int i=0;i<n;i++)
      {
        cin>>a[i];//reading stic lengths
       }
       stick(a,n);//function call
     }//closing while loop
   }//closing main()
  
